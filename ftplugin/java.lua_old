local home = vim.env.HOME -- Get the home directory
local jdtls = require 'jdtls'

-- Needed for debugging
local bundles = {
  vim.fn.glob(home .. '/AppData/Local/nvim-data/mason/share/java-debug-adapter/com.microsoft.java.debug.plugin.jar'),
}

-- Needed for running/debugging unit tests
-- vim.list_extend(bundles, vim.split(vim.fn.glob(home .. '/AppData/Local/nvim-data/mason/share/java-test/*.jar', 1), '\n'))

-- This works for xstore
-- TODO: Do I need to do it only for xstore path?
-- local my_root_dir = vim.fs.dirname(vim.fs.dirname(vim.fs.find({ 'gradlew', '.git', '.gradle', 'mvnw' }, { upward = true })[1]))
local my_root_dir = '/home/viaguila/dev/current/git/xstore/'

local config = {
  -- cmd = { home .. '/AppData/Local/nvim-data/mason/packages/jdtls/bin/jdtls' },
  cmd = { vim.fn.expand '~/.local/share/nvim/mason/packages/jdtls/bin/jdtls' },
  -- cmd = { vim.fn.expand("~/.local/share/nvim/mason/bin/jdtls") },
  root_dir = { my_root_dir },
  --[[
  cmd = {
        -- Ensure you are using the correct java executable that corresponds to your JAVA_HOME
        'java',
        '-Declipse.application=org.eclipse.jdt.ls.core.id1',
        '-Dosgi.bundles.defaultStartLevel=4',
        '-Declipse.product=org.eclipse.jdt.ls.core.product',
        '-Dlog.protocol=true',
        '-Dlog.level=ALL',
        '-Xms1G',
        '--add-modules=ALL-SYSTEM',
        '--add-opens', 'java.base/java.util=ALL-UNNAMED',
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '-jar', vim.fn.glob('C:/Users/victo/AppData/Local/nvim-data/mason/packages/jdtls/plugins/org.eclipse.equinox.launcher_*.jar'),
        '-configuration', 'C:/Users/victo/AppData/Local/nvim-data/mason/packages/jdtls/config_win', -- Or config_linux/config_mac/config_win
        --'-data', '/path/to/your/workspace_data' -- Replace with your workspace data path
    },
  root_dir = vim.fs.dirname(vim.fs.find({ 'gradlew', '.git', 'mvnw' }, { upward = true })[1]),
  ]]

  -- Here you can configure eclipse.jdt.ls specific settings
  -- See https://github.com/eclipse/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request
  -- for a list of options
  settings = {
    java = {
      -- TODO Replace this with the absolute path to your main java version (JDTLS requires JDK 21 or higher)
      home = '/opt/java/jdk-21.0.6',
      -- home = 'D:/java/jdk-23',
      eclipse = {
        downloadSources = true,
      },
      configuration = {
        updateBuildConfiguration = 'interactive',
        -- TODO Update this by adding any runtimes that you need to support your Java projects and removing any that you don't have installed
        -- The runtimes' name parameter needs to match a specific Java execution environments.  See https://github.com/eclipse-jdtls/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request and search "ExecutionEnvironment".
        runtimes = {
          {
            name = 'JavaSE-21',
            path = '/opt/java/jdk-21.0.6',
          },
        },
      },
      imports = { -- <- this
        gradle = {
          java = {
            home = '/opt/java/jdk-21.0.6',
          },
          enabled = true,
          wrapper = {
            enabled = true,
            checksums = {
              {
                sha256 = '7d3a4ac4de1c32b59bc6a4eb8ecb8e612ccd0cf1ae1e99f66902da64df296172',
                allowed = true,
              },
            },
          },
        },
      },
      maven = {
        downloadSources = true,
      },
      implementationsCodeLens = {
        enabled = true,
      },
      referencesCodeLens = {
        enabled = true,
      },
      references = {
        includeDecompiledSources = true,
      },
      signatureHelp = { enabled = true },
      format = {
        enabled = true,
        -- Formatting works by default, but you can refer to a specific file/URL if you choose
        -- settings = {
        --   url = "https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml",
        --   profile = "GoogleStyle",
        -- },
        settings = {
          url = '/home/viaguila/dev/xstore_formatter.xml',
          profile = 'xstore',
        },
      },
      completion = {
        favoriteStaticMembers = {
          'org.hamcrest.MatcherAssert.assertThat',
          'org.hamcrest.Matchers.*',
          'org.hamcrest.CoreMatchers.*',
          'org.junit.jupiter.api.Assertions.*',
          'java.util.Objects.requireNonNull',
          'java.util.Objects.requireNonNullElse',
          'org.mockito.Mockito.*',
        },
        importOrder = {
          'java',
          'javax',
          'com',
          'org',
        },
      },
      sources = {
        organizeImports = {
          starThreshold = 9999,
          staticStarThreshold = 9999,
        },
      },
      codeGeneration = {
        toString = {
          template = '${object.className}{${member.name()}=${member.value}, ${otherMembers}}',
        },
        useBlocks = true,
      },
    },
  },

  -- Needed for auto-completion with method signatures and placeholders
  -- capabilities = require('cmp-nvim-lsp').default_capabilities(),
  flags = {
    allow_incremental_sync = true,
  },
  init_options = {
    -- References the bundles defined above to support Debugging and Unit Testing
    bundles = bundles,
    extendedClientCapabilities = jdtls.extendedClientCapabilities,
    settings = {
      java = {
        implementationsCodeLens = { enabled = true },
        imports = { -- <- this
          gradle = {
            enabled = true,
            wrapper = {
              enabled = true,
              checksums = {
                {
                  sha256 = '7d3a4ac4de1c32b59bc6a4eb8ecb8e612ccd0cf1ae1e99f66902da64df296172',
                  allowed = true,
                },
              },
            },
          },
        },
      },
    },
  },
}

-- Needed for debugging
-- config['on_attach'] = function(client, bufnr)
--   jdtls.setup_dap { hotcodereplace = 'auto' }
--   require('jdtls.dap').setup_dap_main_class_configs()
-- end

require('lspconfig').jdtls.setup(config)

-- This starts a new client & server, or attaches to an existing client & server based on the `root_dir`.
jdtls.start_or_attach(config)
